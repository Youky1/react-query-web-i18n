(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{142:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),c=function(e){var t=r.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=b(e,["components","mdxType","originalType","parentName"]),s=c(n),m=a,d=s["".concat(l,".").concat(m)]||s[m]||p[m]||i;return n?r.a.createElement(d,o(o({ref:t},u),{},{components:n})):r.a.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return c}));var a=n(3),r=n(7),i=(n(0),n(142)),l={id:"useMutation",title:"useMutation"},o={unversionedId:"reference/useMutation",id:"reference/useMutation",isDocsHomePage:!1,title:"useMutation",description:"`js",source:"@site/docs/reference/useMutation.md",slug:"/reference/useMutation",permalink:"/react-query-web-i18n/reference/useMutation",editUrl:"https://github.com/cangSDARM/react-query-web-i18n/docs/reference/useMutation.md",version:"current",lastUpdatedAt:1617941814},b=[],u={toc:b};function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  data,\n  error,\n  isError,\n  isIdle,\n  isLoading,\n  isPaused,\n  isSuccess,\n  mutate,\n  mutateAsync,\n  reset,\n  status,\n} = useMutation(mutationFn, {\n  mutationKey,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess,\n  useErrorBoundary,\n})\n\nmutate(variables, {\n  onError,\n  onSettled,\n  onSuccess,\n})\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Options")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mutationFn: (variables: TVariables) => Promise<TData>"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Required")),Object(i.b)("li",{parentName:"ul"},"A function that performs an asynchronous task and returns a promise."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"variables")," is an object that ",Object(i.b)("inlineCode",{parentName:"li"},"mutate")," will pass to your ",Object(i.b)("inlineCode",{parentName:"li"},"mutationFn")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mutationKey: string"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Optional"),Object(i.b)("li",{parentName:"ul"},"A mutation key can be set to inherit defaults set with ",Object(i.b)("inlineCode",{parentName:"li"},"queryClient.setMutationDefaults")," or to identify the mutation in the devtools."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onMutate: (variables: TVariables) => Promise<TContext | void> | TContext | void"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Optional"),Object(i.b)("li",{parentName:"ul"},"This function will fire before the mutation function is fired and is passed the same variables the mutation function would receive"),Object(i.b)("li",{parentName:"ul"},"Useful to perform optimistic updates to a resource in hopes that the mutation succeeds"),Object(i.b)("li",{parentName:"ul"},"The value returned from this function will be passed to both the ",Object(i.b)("inlineCode",{parentName:"li"},"onError")," and ",Object(i.b)("inlineCode",{parentName:"li"},"onSettled")," functions in the event of a mutation failure and can be useful for rolling back optimistic updates."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onSuccess: (data: TData, variables: TVariables, context?: TContext) => Promise<void> | void"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Optional"),Object(i.b)("li",{parentName:"ul"},"This function will fire when the mutation is successful and will be passed the mutation's result."),Object(i.b)("li",{parentName:"ul"},"If a promise is returned, it will be awaited and resolved before proceeding"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onError: (err: TError, variables: TVariables, context?: TContext) => Promise<void> | void"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Optional"),Object(i.b)("li",{parentName:"ul"},"This function will fire if the mutation encounters an error and will be passed the error."),Object(i.b)("li",{parentName:"ul"},"If a promise is returned, it will be awaited and resolved before proceeding"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onSettled: (data: TData, error: TError, variables: TVariables, context?: TContext) => Promise<void> | void"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Optional"),Object(i.b)("li",{parentName:"ul"},"This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error"),Object(i.b)("li",{parentName:"ul"},"If a promise is returned, it will be awaited and resolved before proceeding"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"retry: boolean | number | (failureCount: number, error: TError) => boolean"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("inlineCode",{parentName:"li"},"false"),", failed mutations will not retry by default."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("inlineCode",{parentName:"li"},"true"),", failed mutations will retry infinitely."),Object(i.b)("li",{parentName:"ul"},"If set to an ",Object(i.b)("inlineCode",{parentName:"li"},"number"),", e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"3"),", failed mutations will retry until the failed mutations count meets that number."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"retryDelay: number | (retryAttempt: number, error: TError) => number"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"This function receives a ",Object(i.b)("inlineCode",{parentName:"li"},"retryAttempt")," integer and the actual Error and returns the delay to apply before the next attempt in milliseconds."),Object(i.b)("li",{parentName:"ul"},"A function like ",Object(i.b)("inlineCode",{parentName:"li"},"attempt => Math.min(attempt > 1 ? 2 ** attempt * 1000 : 1000, 30 * 1000)")," applies exponential backoff."),Object(i.b)("li",{parentName:"ul"},"A function like ",Object(i.b)("inlineCode",{parentName:"li"},"attempt => attempt * 1000")," applies linear backoff."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"useErrorBoundary"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Defaults to the global query config's ",Object(i.b)("inlineCode",{parentName:"li"},"useErrorBoundary")," value, which is ",Object(i.b)("inlineCode",{parentName:"li"},"false")),Object(i.b)("li",{parentName:"ul"},"Set this to true if you want mutation errors to be thrown in the render phase and propagate to the nearest error boundary")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mutate: (variables: TVariables, { onSuccess, onSettled, onError }) => void"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"The mutation function you can call with variables to trigger the mutation and optionally override options passed to ",Object(i.b)("inlineCode",{parentName:"li"},"useMutation"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"variables: TVariables"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Optional"),Object(i.b)("li",{parentName:"ul"},"The variables object to pass to the ",Object(i.b)("inlineCode",{parentName:"li"},"mutationFn"),"."))),Object(i.b)("li",{parentName:"ul"},"Remaining options extend the same options described above in the ",Object(i.b)("inlineCode",{parentName:"li"},"useMutation")," hook."),Object(i.b)("li",{parentName:"ul"},"If you make multiple requests, ",Object(i.b)("inlineCode",{parentName:"li"},"onSuccess")," will fire only after the latest call you've made."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mutateAsync: (variables: TVariables, { onSuccess, onSettled, onError }) => Promise<TData>"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Similar to ",Object(i.b)("inlineCode",{parentName:"li"},"mutate")," but returns a promise which can be awaited."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"status: string"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Will be:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"idle")," initial status prior to the mutation function executing."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"loading")," if the mutation is currently executing."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"error")," if the last mutation attempt resulted in an error."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"success")," if the last mutation attempt was successful."))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isIdle"),", ",Object(i.b)("inlineCode",{parentName:"li"},"isLoading"),", ",Object(i.b)("inlineCode",{parentName:"li"},"isSuccess"),", ",Object(i.b)("inlineCode",{parentName:"li"},"isError"),": boolean variables derived from ",Object(i.b)("inlineCode",{parentName:"li"},"status")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"data: undefined | unknown"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"undefined")),Object(i.b)("li",{parentName:"ul"},"The last successfully resolved data for the query."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"error: null | TError"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"The error object for the query, if an error was encountered."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reset: () => void"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"A function to clean the mutation internal state (i.e., it resets the mutation to its initial state).")))))}c.isMDXComponent=!0}}]);