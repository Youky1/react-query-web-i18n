(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{124:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return b})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return u}));var a=n(3),i=n(7),l=(n(0),n(142)),r={id:"useQuery",title:"useQuery"},b={unversionedId:"reference/useQuery",id:"reference/useQuery",isDocsHomePage:!1,title:"useQuery",description:"`js",source:"@site/docs/reference/useQuery.md",slug:"/reference/useQuery",permalink:"/react-query-web-i18n/reference/useQuery",editUrl:"https://github.com/cangSDARM/react-query-web-i18n/docs/reference/useQuery.md",version:"current",lastUpdatedAt:1615263290},o=[],c={toc:o};function u(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-js"},"const {\n  data,\n  dataUpdatedAt,\n  error,\n  errorUpdatedAt,\n  failureCount,\n  isError,\n  isFetchedAfterMount,\n  isFetching,\n  isIdle,\n  isLoading,\n  isLoadingError,\n  isPlaceholderData,\n  isPreviousData,\n  isRefetchError,\n  isStale,\n  isSuccess,\n  refetch,\n  remove,\n  status,\n} = useQuery(queryKey, queryFn?, {\n  cacheTime,\n  enabled,\n  initialData,\n  initialDataUpdatedAt\n  isDataEqual,\n  keepPreviousData,\n  notifyOnChangeProps,\n  notifyOnChangePropsExclusions,\n  onError,\n  onSettled,\n  onSuccess,\n  queryKeyHashFn,\n  refetchInterval,\n  refetchIntervalInBackground,\n  refetchOnMount,\n  refetchOnReconnect,\n  refetchOnWindowFocus,\n  retry,\n  retryOnMount,\n  retryDelay,\n  select,\n  staleTime,\n  structuralSharing,\n  suspense,\n  useErrorBoundary,\n})\n\n// or using the object syntax\n\nconst result = useQuery({\n  queryKey,\n  queryFn,\n  enabled,\n})\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Options")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"queryKey: string | unknown[]"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Required")),Object(l.b)("li",{parentName:"ul"},"The query key to use for this query."),Object(l.b)("li",{parentName:"ul"},"The query key will be hashed into a stable hash. See ",Object(l.b)("a",{parentName:"li",href:"../guides&concepts/query-keys"},"Query Keys")," for more information."),Object(l.b)("li",{parentName:"ul"},"The query will automatically update when this key changes (as long as ",Object(l.b)("inlineCode",{parentName:"li"},"enabled")," is not set to ",Object(l.b)("inlineCode",{parentName:"li"},"false"),")."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"queryFn: (context: QueryFunctionContext) => Promise<TData>"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Required, but only if no default query function has been defined")," See ",Object(l.b)("a",{parentName:"li",href:"../guides&concepts/default-query-function"},"Default Query Function")," for more information."),Object(l.b)("li",{parentName:"ul"},"The function that the query will use to request data."),Object(l.b)("li",{parentName:"ul"},"Receives a ",Object(l.b)("inlineCode",{parentName:"li"},"QueryFunctionContext")," object with the following variables:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"queryKey: QueryKey")))),Object(l.b)("li",{parentName:"ul"},"Must return a promise that will either resolves data or throws an error."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"enabled: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Set this to ",Object(l.b)("inlineCode",{parentName:"li"},"false")," to disable this query from automatically running."),Object(l.b)("li",{parentName:"ul"},"Can be used for ",Object(l.b)("a",{parentName:"li",href:"../guides&concepts/dependent-queries"},"Dependent Queries"),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"retry: boolean | number | (failureCount: number, error: TError) => boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"false"),", failed queries will not retry by default."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"true"),", failed queries will retry infinitely."),Object(l.b)("li",{parentName:"ul"},"If set to an ",Object(l.b)("inlineCode",{parentName:"li"},"number"),", e.g. ",Object(l.b)("inlineCode",{parentName:"li"},"3"),", failed queries will retry until the failed query count meets that number."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"retryOnMount: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"false"),", the query will not be retried on mount if it contains an error. Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"true"),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"retryDelay: number | (retryAttempt: number, error: TError) => number"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"This function receives a ",Object(l.b)("inlineCode",{parentName:"li"},"retryAttempt")," integer and the actual Error and returns the delay to apply before the next attempt in milliseconds."),Object(l.b)("li",{parentName:"ul"},"A function like ",Object(l.b)("inlineCode",{parentName:"li"},"attempt => Math.min(attempt > 1 ? 2 ** attempt * 1000 : 1000, 30 * 1000)")," applies exponential backoff."),Object(l.b)("li",{parentName:"ul"},"A function like ",Object(l.b)("inlineCode",{parentName:"li"},"attempt => attempt * 1000")," applies linear backoff."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"staleTime: number | Infinity"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The time in milliseconds after data is considered stale. This value only applies to the hook it is defined on."),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"Infinity"),", the data will never be considered stale"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"cacheTime: number | Infinity"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The time in milliseconds that unused/inactive cache data remains in memory. When a query's cache becomes unused or inactive, that cache data will be garbage collected after this duration. When different cache times are specified, the longest one will be used."),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"Infinity"),", will disable garbage collection"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"refetchInterval: false | number"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"If set to a number, all queries will continuously refetch at this frequency in milliseconds"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"refetchIntervalInBackground: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"true"),", queries that are set to continuously refetch with a ",Object(l.b)("inlineCode",{parentName:"li"},"refetchInterval")," will continue to refetch while their tab/window is in the background"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'refetchOnMount: boolean | "always"'),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"true")),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"true"),", the query will refetch on mount if the data is stale."),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"false"),", the query will not refetch on mount."),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},'"always"'),", the query will always refetch on mount."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'refetchOnWindowFocus: boolean | "always"'),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"true")),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"true"),", the query will refetch on window focus if the data is stale."),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"false"),", the query will not refetch on window focus."),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},'"always"'),", the query will always refetch on window focus."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'refetchOnReconnect: boolean | "always"'),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"true")),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"true"),", the query will refetch on reconnect if the data is stale."),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"false"),", the query will not refetch on reconnect."),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},'"always"'),", the query will always refetch on reconnect."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'notifyOnChangeProps: string[] | "tracked"'),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"If set, the component will only re-render if any of the listed properties change."),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"['data', 'error']")," for example, the component will only re-render when the ",Object(l.b)("inlineCode",{parentName:"li"},"data")," or ",Object(l.b)("inlineCode",{parentName:"li"},"error")," properties change."),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},'"tracked"'),", access to properties will be tracked, and the component will only re-render when one of the tracked properties change."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"notifyOnChangePropsExclusions: string[]"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"If set, the component will not re-render if any of the listed properties change."),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"['isStale']")," for example, the component will not re-render when the ",Object(l.b)("inlineCode",{parentName:"li"},"isStale")," property changes."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"onSuccess: (data: TData) => void"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"This function will fire any time the query successfully fetches new data."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"onError: (error: TError) => void"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"This function will fire if the query encounters an error and will be passed the error."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"onSettled: (data?: TData, error?: TError) => void"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"This function will fire any time the query is either successfully fetched or errors and be passed either the data or error"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"select: (data: TData) => unknown"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"This option can be used to transform or select a part of the data returned by the query function."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"suspense: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"Set this to ",Object(l.b)("inlineCode",{parentName:"li"},"true")," to enable suspense mode."),Object(l.b)("li",{parentName:"ul"},"When ",Object(l.b)("inlineCode",{parentName:"li"},"true"),", ",Object(l.b)("inlineCode",{parentName:"li"},"useQuery")," will suspend when ",Object(l.b)("inlineCode",{parentName:"li"},"status === 'loading'")),Object(l.b)("li",{parentName:"ul"},"When ",Object(l.b)("inlineCode",{parentName:"li"},"true"),", ",Object(l.b)("inlineCode",{parentName:"li"},"useQuery")," will throw runtime errors when ",Object(l.b)("inlineCode",{parentName:"li"},"status === 'error'")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"initialData: TData | () => TData"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"If set, this value will be used as the initial data for the query cache (as long as the query hasn't been created or cached yet)"),Object(l.b)("li",{parentName:"ul"},"If set to a function, the function will be called ",Object(l.b)("strong",{parentName:"li"},"once")," during the shared/root query initialization, and be expected to synchronously return the initialData"),Object(l.b)("li",{parentName:"ul"},"Initial data is considered stale by default unless a ",Object(l.b)("inlineCode",{parentName:"li"},"staleTime")," has been set."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"initialData")," ",Object(l.b)("strong",{parentName:"li"},"is persisted")," to the cache"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"initialDataUpdatedAt: number | (() => number | undefined)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"If set, this value will be used as the time (in milliseconds) of when the ",Object(l.b)("inlineCode",{parentName:"li"},"initialData")," itself was last updated."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"placeholderData: TData | () => TData"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"If set, this value will be used as the placeholder data for this particular query observer while the query is still in the ",Object(l.b)("inlineCode",{parentName:"li"},"loading")," data and no initialData has been provided."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"placeholderData")," is ",Object(l.b)("strong",{parentName:"li"},"not persisted")," to the cache"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"keepPreviousData: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"false")),Object(l.b)("li",{parentName:"ul"},"If set, any previous ",Object(l.b)("inlineCode",{parentName:"li"},"data")," will be kept when fetching new data because the query key changed."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"structuralSharing: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional"),Object(l.b)("li",{parentName:"ul"},"Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"true")),Object(l.b)("li",{parentName:"ul"},"If set to ",Object(l.b)("inlineCode",{parentName:"li"},"false"),", structural sharing between query results will be disabled.")))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"status: String"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Will be:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"idle")," if the query is idle. This only happens if a query is initialized with ",Object(l.b)("inlineCode",{parentName:"li"},"enabled: false")," and no initial data is available."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"loading"),' if the query is in a "hard" loading state. This means there is no cached data and the query is currently fetching, eg ',Object(l.b)("inlineCode",{parentName:"li"},"isFetching === true")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"error")," if the query attempt resulted in an error. The corresponding ",Object(l.b)("inlineCode",{parentName:"li"},"error")," property has the error received from the attempted fetch"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"success")," if the query has received a response with no errors and is ready to display its data. The corresponding ",Object(l.b)("inlineCode",{parentName:"li"},"data")," property on the query is the data received from the successful fetch or if the query's ",Object(l.b)("inlineCode",{parentName:"li"},"enabled")," property is set to ",Object(l.b)("inlineCode",{parentName:"li"},"false")," and has not been fetched yet ",Object(l.b)("inlineCode",{parentName:"li"},"data")," is the first ",Object(l.b)("inlineCode",{parentName:"li"},"initialData")," supplied to the query on initialization."))))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isIdle: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"A derived boolean from the ",Object(l.b)("inlineCode",{parentName:"li"},"status")," variable above, provided for convenience."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isLoading: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"A derived boolean from the ",Object(l.b)("inlineCode",{parentName:"li"},"status")," variable above, provided for convenience."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isSuccess: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"A derived boolean from the ",Object(l.b)("inlineCode",{parentName:"li"},"status")," variable above, provided for convenience."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isError: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"A derived boolean from the ",Object(l.b)("inlineCode",{parentName:"li"},"status")," variable above, provided for convenience."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isLoadingError: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Will be ",Object(l.b)("inlineCode",{parentName:"li"},"true")," if the query failed while fetching for the first time."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isRefetchError: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Will be ",Object(l.b)("inlineCode",{parentName:"li"},"true")," if the query failed while refetching."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"data: TData"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"undefined"),"."),Object(l.b)("li",{parentName:"ul"},"The last successfully resolved data for the query."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"dataUpdatedAt: number"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The timestamp for when the query most recently returned the ",Object(l.b)("inlineCode",{parentName:"li"},"status")," as ",Object(l.b)("inlineCode",{parentName:"li"},'"success"'),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"error: null | TError"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"null")),Object(l.b)("li",{parentName:"ul"},"The error object for the query, if an error was thrown."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"errorUpdatedAt: number"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The timestamp for when the query most recently returned the ",Object(l.b)("inlineCode",{parentName:"li"},"status")," as ",Object(l.b)("inlineCode",{parentName:"li"},'"error"'),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isStale: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Will be ",Object(l.b)("inlineCode",{parentName:"li"},"true")," if the data in the cache is invalidated or if the data is older than the given ",Object(l.b)("inlineCode",{parentName:"li"},"staleTime"),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isPlaceholderData: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Will be ",Object(l.b)("inlineCode",{parentName:"li"},"true")," if the data shown is the placeholder data."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isPreviousData: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Will be ",Object(l.b)("inlineCode",{parentName:"li"},"true")," when ",Object(l.b)("inlineCode",{parentName:"li"},"keepPreviousData")," is set and data from the previous query is returned."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isFetchedAfterMount: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Will be ",Object(l.b)("inlineCode",{parentName:"li"},"true")," if the query has been fetched after the component mounted."),Object(l.b)("li",{parentName:"ul"},"This property can be used to not show any previously cached data."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isFetching: boolean"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"true")," so long as ",Object(l.b)("inlineCode",{parentName:"li"},"enabled")," is set to ",Object(l.b)("inlineCode",{parentName:"li"},"false")),Object(l.b)("li",{parentName:"ul"},"Will be ",Object(l.b)("inlineCode",{parentName:"li"},"true")," if the query is currently fetching, including background fetching."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"failureCount: number"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The failure count for the query."),Object(l.b)("li",{parentName:"ul"},"Incremented every time the query fails."),Object(l.b)("li",{parentName:"ul"},"Reset to ",Object(l.b)("inlineCode",{parentName:"li"},"0")," when the query succeeds."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"refetch: (options: { throwOnError: boolean, cancelRefetch: boolean }) => Promise<UseQueryResult>"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"A function to manually refetch the query."),Object(l.b)("li",{parentName:"ul"},"If the query errors, the error will only be logged. If you want an error to be thrown, pass the ",Object(l.b)("inlineCode",{parentName:"li"},"throwOnError: true")," option"),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"cancelRefetch")," is ",Object(l.b)("inlineCode",{parentName:"li"},"true"),", then the current request will be cancelled before a new request is made"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"remove: () => void"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"A function to remove the query from the cache.")))))}u.isMDXComponent=!0},142:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),u=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},p=function(e){var t=u(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,d=p["".concat(r,".").concat(m)]||p[m]||s[m]||l;return n?i.a.createElement(d,b(b({ref:t},c),{},{components:n})):i.a.createElement(d,b({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=m;var b={};for(var o in t)hasOwnProperty.call(t,o)&&(b[o]=t[o]);b.originalType=e,b.mdxType="string"==typeof e?e:a,r[1]=b;for(var c=2;c<l;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);