(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{142:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return y}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),u=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=r,y=p["".concat(c,".").concat(d)]||p[d]||b[d]||a;return t?o.a.createElement(y,i(i({ref:n},s),{},{components:t})):o.a.createElement(y,i({ref:n},s))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},67:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return u}));var r=t(3),o=t(7),a=(t(0),t(142)),c={id:"query-cancellation",title:"Query Cancellation"},i={unversionedId:"guides&concepts/query-cancellation",id:"guides&concepts/query-cancellation",isDocsHomePage:!1,title:"Query Cancellation",description:"By default, queries that unmount or become unused before their promises are resolved are simply ignored instead of canceled. Why is this?",source:"@site/docs/guides&concepts/query-cancellation.md",slug:"/guides&concepts/query-cancellation",permalink:"/react-query-web-i18n/guides&concepts/query-cancellation",editUrl:"https://github.com/cangSDARM/react-query-web-i18n/docs/guides&concepts/query-cancellation.md",version:"current",lastUpdatedAt:1614763020,sidebar:"zhCN",previous:{title:"Optimistic Updates",permalink:"/react-query-web-i18n/guides&concepts/optimistic-updates"},next:{title:"Scroll Restoration",permalink:"/react-query-web-i18n/guides&concepts/scroll-restoration"}},l=[{value:"Using <code>axios</code>",id:"using-axios",children:[]},{value:"Using <code>fetch</code>",id:"using-fetch",children:[]},{value:"Manual Cancellation",id:"manual-cancellation",children:[]}],s={toc:l};function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"By default, queries that unmount or become unused before their promises are resolved are simply ignored instead of canceled. Why is this?"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"For most applications, ignoring out-of-date queries is sufficient."),Object(a.b)("li",{parentName:"ul"},"Cancellation APIs may not be available for every query function."),Object(a.b)("li",{parentName:"ul"},"If cancellation APIs are available, they typically vary in implementation between utilities/libraries (eg. Fetch vs Axios vs XMLHttpRequest).")),Object(a.b)("p",null,"But don't worry! If your queries are high-bandwidth or potentially very expensive to download, React Query exposes a generic way to ",Object(a.b)("strong",{parentName:"p"},"cancel")," query requests using a cancellation token or other related API. To integrate with this feature, attach a ",Object(a.b)("inlineCode",{parentName:"p"},"cancel")," function to the promise returned by your query that implements your request cancellation. When a query becomes out-of-date or inactive, this ",Object(a.b)("inlineCode",{parentName:"p"},"promise.cancel")," function will be called (if available):"),Object(a.b)("h2",{id:"using-axios"},"Using ",Object(a.b)("inlineCode",{parentName:"h2"},"axios")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"import { CancelToken } from 'axios'\n\nconst query = useQuery('todos', () => {\n  // Create a new CancelToken source for this request\n  const source = CancelToken.source()\n\n  const promise = axios.get('/todos', {\n    // Pass the source token to your request\n    cancelToken: source.token,\n  })\n\n  // Cancel the request if React Query calls the `promise.cancel` method\n  promise.cancel = () => {\n    source.cancel('Query was cancelled by React Query')\n  }\n\n  return promise\n})\n")),Object(a.b)("h2",{id:"using-fetch"},"Using ",Object(a.b)("inlineCode",{parentName:"h2"},"fetch")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const query = useQuery('todos', () => {\n  // Create a new AbortController instance for this request\n  const controller = new AbortController()\n  // Get the abortController's signal\n  const signal = controller.signal\n\n  const promise = fetch('/todos', {\n    method: 'get',\n    // Pass the signal to your request\n    signal,\n  })\n\n  // Cancel the request if React Query calls the `promise.cancel` method\n  promise.cancel = () => controller.abort()\n\n  return promise\n})\n")),Object(a.b)("h2",{id:"manual-cancellation"},"Manual Cancellation"),Object(a.b)("p",null,"You might want to cancel a query manually. For example, if the request takes a long time to finish, you can allow the user to click a cancel button to stop the request. To do this, you just need to call ",Object(a.b)("inlineCode",{parentName:"p"},"queryClient.cancelQueries(key)"),". If ",Object(a.b)("inlineCode",{parentName:"p"},"promise.cancel")," is available, React Query will cancel the request."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const [queryKey] = useState('todos')\n\nconst query = useQuery(queryKey, () => {\n  const controller = new AbortController()\n  const signal = controller.signal\n\n  const promise = fetch('/todos', {\n    method: 'get',\n    signal,\n  })\n\n  // Cancel the request if React Query calls the `promise.cancel` method\n  promise.cancel = () => controller.abort()\n\n  return promise\n})\n\nconst queryClient = useQueryClient();\n\nreturn (\n  <button onClick={(e) => {\n    e.preventDefault();\n    queryClient.cancelQueries(queryKey);\n   }}>Cancel</button>\n)\n")))}u.isMDXComponent=!0}}]);